@using System.Text
@using RebuildSharedData.Enum
@using RebuildSharedData.Enum.EntityStats
@using RoRebuildServer.Data
@using RoRebuildServer.Data.Monster
@using RoWikiGenerator.Generators

@code {
    [Parameter] public MonsterDatabaseInfo Monster { get; set; }
    [Parameter] public Generators.MonsterModel Model { get; set; }
    [Parameter] public bool ShowSpawns { get; set; }
    [Parameter] public string? SpawnRestrictedMap { get; set; }
    [Parameter] public bool RelativePath { get; set; } = false;

    string TimeSpanToTimeString(TimeSpan time)
    {
        var sOut = new StringBuilder();
        if (time.Hours > 0)
            sOut.Append($"{time.Hours}h");
        if (time.Minutes > 0)
            sOut.Append($"{time.Minutes}m");
        if (time.Seconds > 0)
            sOut.Append($"{time.Seconds}s");
        if (sOut.Length == 0)
            return "0s";
        return sOut.ToString();
    }
}

@{
    var relPath = RelativePath ? "../" : "";
    var m = Monster;

    var mvp = "";
    if (DataManager.MvpMonsterCodes.Contains(m.Code))
        mvp = "MVP Boss";
    if (m.Special == CharacterSpecialType.Boss && mvp == "")
        mvp = "Boss";
    var name = m.Id switch
    {
        4146 => "Whisper (Stationary)",
        4147 => "Whisper (Giant)",
        6000 => "Moonlight Flower (Clone)",
        6001 => "Thief Bug Egg (Summon)",
        _ => m.Name
    };
    var special = "";

    var sprite = m.Code.ToLower();
    var magicMin = m.Int + (m.Int / 7) * (m.Int / 7);
    var magicMax = m.Int + (m.Int / 5) * (m.Int / 5);
    if (magicMin < m.AtkMin / 6)
        magicMin = m.AtkMin / 6;
    if (magicMax < m.AtkMax / 6)
        magicMax = m.AtkMax / 6;
}
<table id="@m.Code" cellpadding=4 style="width: 98%">
    <tr>
        <td style="vertical-align:top; width:20%;">
            <H2 class="subheader">@name</H2>
            <br>
            <center><img src="@(relPath)images/rebuildmonsters/@(sprite).png" /></center>
        </td>

        <td style="vertical-align:top; width:22%;">
            <H2 class="subheader">Stats</H2>
            <table>
                <tr><td><b>Level:</b></td><td>@m.Level</td></tr>
                <tr><td><b>HP:</b></td><td>@m.HP.ToString("N0")</td></tr>
                @if (!string.IsNullOrWhiteSpace(mvp))
                {
                    <tr><td><b>Class:</b></td><td>@mvp</td></tr>
                }
                <tr><td><b>Size:</b></td><td>@m.Size</td></tr>
                <tr><td><b>Element:</b></td><td>@m.Element</td></tr>
                <tr><td><b>Race:</b></td><td>@m.Race</td></tr>
                @if (m.Tags?.Count > 0)
                {
                    <tr>
                        <td><b>Special Type:</b></td>
                        <td>
                            @string.Join(", ", m.Tags.Select(t => Monsters.IdToTagLookup[t]).ToList())
                        </td>
                    </tr>

                }
                <tr><td><b>Base Exp:</b></td><td>@m.Exp.ToString("N0")</td></tr>
                <tr><td><b>Job Exp:</b></td><td>@m.JobExp.ToString("N0")</td></tr>
                <tr><td><b>Attack Power:</b></td><td>@m.AtkMin.ToString("N0") ~ @m.AtkMax.ToString("N0")</td></tr>
                <tr><td><b>Magic Attack:</b></td><td>@magicMin.ToString("N0") ~ @magicMax.ToString("N0")</td></tr>
                @if (m.Range > 1)
                {
                    <tr><td><b>Range:</b></td><td>@m.Range</td></tr>
                }
                <tr><td><b>Defence:</b></td><td>@m.Def</td></tr>
                <tr><td><b>Magic Defence:</b></td><td>@m.MDef</td></tr>
                <tr><td><b>95% Flee:</b></td><td>@(m.Dex + m.Level + 75)</td></tr>
                <tr><td><b>100% Hit:</b></td><td>@(m.Agi + m.Level + 20)</td></tr>
                <tr><td><b>Vit:</b></td><td>@m.Vit</td></tr>
                <tr><td><b>Int:</b></td><td>@m.Int</td></tr>
                <tr><td><b>Luck:</b></td><td>@m.Luk</td></tr>
            </table>
        </td>
        <td style="vertical-align:top; width:25%;">
            <H2 class="subheader">Drops</H2>
            <table>

                @if (DataManager.MonsterDropData.TryGetValue(m.Code, out var drops))
                {
                    @foreach (var drop in drops.DropChances)
                    {
                        var item = DataManager.ItemList[drop.Id];
                        var countStr = "";
                        var itemSprite = item.Name.Replace(" ", "_");
                        var data = DataManager.GetItemInfoById(drop.Id);
                        var itemPath = "";
                        if (@Model.SharedIcons.TryGetValue(itemSprite, out var copy))
                            itemSprite = copy;
                        if (item.ItemClass == ItemClass.Card)
                            itemSprite = "Poring_Card";
                        if (drop.CountMax > 1)
                            if (drop.CountMin == drop.CountMax)
                                countStr = $"[{drop.CountMax}x]";
                            else
                                countStr = $"[{drop.CountMin}x-{drop.CountMax}x]";
                        if (item.ItemClass == ItemClass.Weapon)
                            if (DataManager.WeaponInfo.TryGetValue(item.Id, out var weapon))
                            {
                                if (weapon.CardSlots > 0)
                                    countStr = $"[{weapon.CardSlots}]";
                                if (data != null)
                                    itemPath = $"{relPath}rebuildWeapons.html#{data.Code}";
                            }

                        if (item.ItemClass == ItemClass.Equipment)
                        {
                            if (DataManager.ArmorInfo.TryGetValue(item.Id, out var armor) && armor.CardSlots > 0)
                                countStr = $"[{armor.CardSlots}]";
                            if (data != null)
                                itemPath = $"{relPath}rebuildEquipment.html#{data.Code}";
                        }

                        if (item.ItemClass == ItemClass.Card && data != null)
                            itemPath = $"{relPath}rebuildCards.html#{data.Code}";

                        if (item.ItemClass == ItemClass.Useable && data != null)
                            itemPath = $"{relPath}rebuildConsumable.html#{data.Code}";

                        if (item.ItemClass == ItemClass.Etc && data != null)
                            itemPath = $"{relPath}rebuildEtcItems.html#{data.Code}";
                        if (item.Code == "Okolnir_Key")
                            itemPath = "";

                        Items.RegisterItemSource(m, drop);

                        <tr>
                            <td style='text-align:center'><img src="@(relPath)images/rebuilditems/@(itemSprite).png"></td>
                            @if (string.IsNullOrWhiteSpace(itemPath))
                            {
                                <td height=24>@(item.Name)@(countStr) (@(drop.Chance / 100f)%)</td>
                            }
                            else
                            {
                                <td height=24><a href="@itemPath">@(item.Name)@(countStr)</a> (@(drop.Chance / 100f)%)</td>
                            }
                        </tr>

                    }
                }
            </table>
        </td>
        @if (ShowSpawns)
        {
            <td style="vertical-align:top; width:33%;">
                <H2 class="subheader">Spawns</H2>
                <table>

                    @if (Model.MonsterMapSpawns.TryGetValue(m.Id, out var spawn))
                    {
                        var s = spawn.OrderByDescending(e => e.spawn.Count);
                        foreach (var (mapCode, mapSpawn) in spawn)
                        {
                            if (!string.IsNullOrWhiteSpace(SpawnRestrictedMap) && mapCode != SpawnRestrictedMap)
                                continue;

                            var map = DataManager.Maps.FirstOrDefault(m => m.Code == mapCode);
                            var mapName = map != null ? map.Name : mapCode;
                            var time = "Instant";
                            if (mapSpawn.MinSpawnTime > ServerConfig.DebugConfig.MinSpawnTime)
                            {
                                var min = TimeSpan.FromMilliseconds(mapSpawn.MinSpawnTime);
                                var max = TimeSpan.FromMilliseconds(mapSpawn.MaxSpawnTime);
                                if (min == max)
                                    time = TimeSpanToTimeString(min);
                                else
                                    time = $"{TimeSpanToTimeString(min)} - {TimeSpanToTimeString(max)}";
                            }
                            <tr>
                                <td width=60%>
                                    @switch (mapSpawn.DisplayType)
                                    {
                                        case CharacterDisplayType.Boss:
                                            <img src='@(relPath)images/iconboss.png' />
                                            break;
                                        case CharacterDisplayType.Mvp:
                                            <img src='@(relPath)images/iconmvp.png' />
                                            break;
                                    }
                                    <a href="@(relPath)maps/@(mapCode).html">@mapName (@mapCode)</a>
                                </td>
                                <td width=15%>@(mapSpawn.Count)</td>
                                <td width=25%>@time</td>
                            </tr>
                        }
                    }

                </table>
            </td>
        }
    </tr>
</table>
