
SkillHandler("PORING50") {
StateIdle:
	//TryCast params: skillname, level, chance/1000, cast time (ms), delay time (ms)
	TryCast(ColdBolt, 3, 50, 1000, 5000)-> SendEmote(29); //gg

StateRandomMove:
	TryCast(ColdBolt, 3, 50, 1000, 5000)-> SendEmote(29); //gg

StateAttacking:
	TryCast(ColdBolt, 5, 200, 1500, 15000)-> SendEmote(29); //gg
	TryCast(None, 1, 1000, 0, 5000)[HpPercent < 40] -> {
		SendEmote(26); //Help
		ChangeAiState(StateFlee);
	}

StateFlee:
	TryCast(None, 1, 200, 0, 3000) -> SendEmote(26);
	TryCast(None, 1, 50, 0, 15000) -> {
		SendEmote(5); //sweat
		ChangeAiState(StateIdle);
	}
}

SkillHandler("ELDER_WILLOW") {
StateAttacking:
	TryCast(FireBolt, 3, 50, 1500, 5000);
StateChase:
	TryCast(FireBolt, 3, 50, 1500, 5000);
}

SkillHandler("MOONLIGHT") {
StateChase:
	TryCast(ColdBolt, 5, 200, 0, 5000);
	TryCast(FireBolt, 5, 200, 0, 5000);
	TryCast(LightningBolt, 5, 200, 0, 5000);
StateAttacking:
	TryCast(Mammonite, 10, 200, 0, 5000) -> SendEmote(8);
}


/*
SkillHandler("Poring") {
StateIdle:
	//TryCast rolls to see if the monster will cast a skill (if that skill is off cooldown).
	//Once a skill is selected, no other code runs and the handler ends.
	//Parameters: skill name, skill level, chance to cast (out of 1000), cast time, skill cooldown, flags
	//value within square brackets are additional conditions to execute that skill
	//the code block after the -> is the event handler for once that skill finishes casting.
		
	TryCast(ColdBolt,3,200,1000,5000);
	TryCast(Heal,3,1000,500,15000)[HpPercent < 70] -> SendEmote(2); //whistle emote
	TryCast(Heal,3,1000,500,15000)[AllyHpPercent < 90] -> {
		if(SkillTarget.Name == "poring")
			SendEmoteFromTarget(3); //heartEmote
	}

StateAttack:
	TryCast(Heal,5,1000,800,10000,NoInterrupt|EventOnStartCast)[HpPercent < 40] -> SendEmote(28); //cry
}


*/