//------------------------------------
// Golden Thiefbug
//------------------------------------

macro GtbEmptyEvent() {}
macro GtbPutLowHpTossOnCooldown() {SetEventCooldown("LowHpToss", 1m);}

macro GoldenBugEggToss(%chance, %min, %max, %delay, %castEvent) {
	if(CheckCast(SummonMonster, %chance))
	{
		count = Random(%min, %max);
		CreateEvent("GtbSummonArray", CurrentPosition, count);
		@%castEvent();
		Cast(SummonMonster, 1, count*0.2s, %delay, NoInterrupt | HideSkillName);
	}
}

SkillHandler("GOLDEN_BUG") {
OnInit:
	ResummonMinionCount = 8; //resummon if we have 4 or less
StateAny: 
    TryCast(CallMinion, 1, 100%, 0.7s, 15s)[MinionsDeadFor(8s) && !IsHiding] -> CallDefaultMinions();
	TryCast(Hiding, 3, 100%, 0, 30s)[IsHiding];
	TryCast(RecallMinion, 1, 100%, 0, 30s);
StateAttacking:
	var count = 0; //have to define variables at the start or there'll be scope issues
	if(HpPercent < 40 && IsNamedEventOffCooldown("LowHpToss")) {
		TryCast(Hiding, 3, 100%, 0, 15s)[!IsHiding] -> ResetSkillCooldown(SummonMonster);
		@GoldenBugEggToss(100%, 5, 8, 15s, GtbPutLowHpTossOnCooldown);
	}
	if(HpPercent < 90) {
		@GoldenBugEggToss(30%, 1, (100-HpPercent)/10, 15s, GtbEmptyEvent);
	}

	TryCast(Mammonite, 5, 20%, 0, 5s) -> SendEmote(8); //dollar sign
    TryCast(CallMinion, 1, 10%, 0.7s, 15s)[MinionsDeadFor(8s)] -> CallDefaultMinions();
StateChase:
	TryCast(Heal, 4999, 10%, 0s, 15s)[HpPercent < 30];
StateIdle:
	var count = 0; //have to define variables at the start or there'll be scope issues
	TryCast(Heal, 9999, 100%, 0s, 5s)[IsHiding];
	TryCast(Heal, 9999, 10%, 0s, 15s)[HpPercent < 70];
	if(IsHiding)
	{
		@GoldenBugEggToss(100%, 5, 8, 15s, GtbPutLowHpTossOnCooldown);
	}
}

event GtbSummonArray {
	local total = Param1;
	local count = 0;
	StartTimer();
OnTimer 200:
	if(IsOwnerAlive == false) { EndEvent(); return; }
	count = count + 1;
	PlaySoundEffect("t_회피"); //throwing sound
	TossSummonMonster(1, "GTB_EGG", 9, 9); //toss out an egg every 200ms
	if(count < total)
		ResetTimer();
	else
		EndEvent();
}

SkillHandler("GTB_EGG") {
StateAny:
	if(TimeAlive > 5s) {
		TryCast(NoCast, 1, 100%, 0, 0s)[IsMasterAlive == false] -> Die();
		TryCast(Metamorphosis, 1, 15%, 6s, 0s, NeverInterrupt | HideSkillName) -> {
			if(IsMasterAlive)
				SummonMonstersUnderMyMaster(Random(1,3), "GTB_SUMMON");
			Die();
		}
	}
}

SkillHandler("GTB_SUMMON") {
StateAny:
	TryCast(NoCast, 1, 100%, 0, 0s)[IsMasterAlive == false] -> Die();
StateIdle:
	if(TimeAlive > 5s)
	{
		TryCast(None, 1, 10%, 0.3s, 0s, EasyInterrupt) -> {
			HealMyMaster(HpValue*2); //heal master remaining HP
			Leave(); //and then vanish
			return;
		}
	}
}

//------------------------------------
// Osiris
//------------------------------------

SkillHandler("OSIRIS") {
OnInit:
	ResummonMinionCount = 2; //resummon if we have 3 or less
	SkipNextMinionDeadTimer(); //he will summon instantly after you kill his first isis mob, then delay after that
StateIdle: 
StateAny: 
    TryCast(CallMinion, 1, 50%, 0.7s, 45s)[MinionsDeadFor(20s)] -> SummonMinions(5, "ANCIENT_MUMMY");
	TryCast(RecallMinion, 1, 100%, 0, 30s);
StateChase:
	TryCast(DarkThunder, 10, 20%, 0, 5s);
StateAttacking:
	TryCast(Bash, 10, 20%, 0, 5s);
	TryCast(PowerUp, 5, 100%, 0.7s, 2m)[HpPercent < 30] -> SendEmote(6);
	TryCast(SpeedUp, 5, 100%, 0s, 45s, HideSkillName)[HpPercent < 30] -> SendEmote(6);
}

//------------------------------------
// Turtle General
//------------------------------------

SkillHandler("TURTLE_GENERAL") {
OnInit:
	ResummonMinionCount = 3; //resummon if we have 3 or less
StateAny: 
    TryCast(CallMinion, 1, 10%, 0.7s, 45s)[MinionsDeadFor(20s)] -> CallDefaultMinions();
	TryCast(RecallMinion, 1, 100%, 0, 30s);
StateAttacking:
	TryCast(SonicBlow, 10, 20%, 0, 5s) -> SendEmote(18); //laugh
}


//------------------------------------
// Baphomet
//------------------------------------

SkillHandler("BAPHOMET") {
OnInit:
	ResummonMinionCount = 3; //resummon if we have 3 or less
StateAny: 
    TryCast(CallMinion, 1, 100%, 0s, 30s)[MinionsDeadFor(15s)] -> CallDefaultMinions();
	TryCast(RecallMinion, 1, 100%, 0, 30s);
StateIdle:
	TryCast(Heal, 9999, 100%, 0s, 5s)[HpPercent < 50];
StateChase:
    TryCast(Heal, 9999, 100%, 0s, 10s)[HpPercent < 50];
	TryCast(DarkStrike, 10, 20%, 0, 5s);
	TryCast(LordOfVermilion, 10, 50%, 0.5s, 5s);
StateAttacking:
	TryCast(PowerUp, 5, 100%, 0.7s, 30s)[HpPercent < 30];
	TryCast(LordOfVermilion, 10, 10%, 0.5s, 5s);
}


//------------------------------------
// Osiris
//------------------------------------

SkillHandler("DARK_LORD") {
OnInit:
	ResummonMinionCount = 3; //resummon if we have 3 or less
StateAny:
	TryCast(RecallMinion, 1, 100%, 0, 30s);
StateIdle: 
	TryCast(CallMinion, 1, 25%, 0.3s, 20s, NoInterrupt)[MinionCount < 5] -> SummonMinions(2, "DARK_ILLUSION");
StateChase: 
    TryCast(CallMinion, 1, 100%, 0.3s, 20s, NoInterrupt)[MinionsDeadFor(40s)] -> SummonMinions(1, "DARK_ILLUSION");
	TryCast(FireWall, 10, 20%, 0.5s, 5s, NoInterrupt);
StateAttacking:
	TryCast(CallMinion, 1, 100%, 0.3s, 20s, NoInterrupt)[MinionsDeadFor(40s)] -> SummonMinions(1, "DARK_ILLUSION");
	TryCast(Bash, 10, 20%, 0, 5s);
}

//------------------------------------
// Maya
//------------------------------------

SkillHandler("MAYA") {
OnInit:
	ResummonMinionCount = 2; //resummon if we have 3 or less
StateIdle:
	TryCast(Heal, 9999, 100%, 0s, 5s)[HpPercent < 30];
	TryCast(RecallMinion, 1, 100%, 0, 30s);
StateAny: 
    TryCast(CallMinion, 1, 20%, 0.7s, 30s)[MinionsDeadFor(15s)] -> {
		SummonMinions(1, "SOLDIER_ANDRE");
		SummonMinions(1, "SOLDIER_PIERE");
		SummonMinions(1, "SOLDIER_DENIRO");
	};
	TryCast(Heal, 9, 100%, 0s, 5s)[FindAllyBelowHpPercent(60)];
StateChase:
	TryCast(Heal, 5000, 20%, 0s, 15s)[HpPercent < 30];
StateAttacking:
	TryCast(PowerUp, 3, 100%, 0.7s, 25s)[HpPercent < 30];
	TryCast(Heal, 5000, 20%, 0s, 15s)[HpPercent < 30];
}

//------------------------------------
// PHREEONI
//------------------------------------

SkillHandler("PHREEONI") {
StateAny: 
    TryCast(CallMinion, 1, 20%, 0.7s, 30s)[MinionCount < 3] -> CallDefaultMinions();
	TryCast(RecallMinion, 1, 100%, 0, 30s);
StateIdle:
    TryCast(Heal, 9999, 100%, 0s, 10s)[HpPercent < 50];
StateChase:
	TryCast(PowerUp, 3, 100%, 0.7s, 30s)[HpPercent < 30];
    TryCast(Heal, 9999, 100%, 0s, 15s)[HpPercent < 50];
}

//------------------------------------
// Mistress
//------------------------------------

SkillHandler("MISTRESS") {
OnInit:
	ResummonMinionCount = 2; //resummon if we have 2 or less
StateAny: 
    TryCast(CallMinion, 1, 20%, 1.4s, 45s)[MinionsDeadFor(25s)] -> CallDefaultMinions();
	TryCast(RecallMinion, 1, 100%, 0, 30s);
StateIdle:
	TryCast(Heal, 9999, 100%, 0s, 5s)[HpPercent < 30];
StateChase:
	TryCast(SpeedUp, 5, 100%, 0s, 40s, HideSkillName)[HpPercent < 30] -> SendEmote(6);
	TryCast(Heal, 9999, 100%, 0s, 10s)[HpPercent < 30];
	TryCast(JupitelThunder, 28, 20%, 0, 5s);
StateAttacking:
	TryCast(SpeedUp, 5, 100%, 0s, 40s, HideSkillName)[HpPercent < 30] -> SendEmote(6);
	TryCast(Heal, 9999, 100%, 0s, 10s)[HpPercent < 30];
	TryCast(JupitelThunder, 28, 20%, 0, 5s);
	TryCast(Pneuma, 1, 20%, 0, 5s)[WasRangedAttacked];
}


//------------------------------------
// Pharaoh
//------------------------------------

SkillHandler("PHARAOH") {
OnInit:
	ResummonMinionCount = 3; //resummon if we have 3 or less
StateAny:
	TryCast(RecallMinion, 1, 100%, 0, 30s);
StateIdle:
	TryCast(Heal, 19999, 100%, 0s, 0)[TimerFinished(0)] -> ResetTimer(0); //if you teleport away from dark blessing, he heals instead
    TryCast(CallMinion, 1, 20%, 1.4s, 25s)[MinionCount < 3] -> CallDefaultMinions(); //ignore minimum time when idle
StateChase:
	TryCast(NoCast, 3, 100%, 0s, 10s, HideSkillName)[TimerFinished(0)] -> SetAttackCooldown(1s); //make him not attack when dark blessing activates
	TryCast(DarkAttack, 3, 100%, 1s, 0, HideSkillName)[TimerFinished(0)] -> ResetTimer(0);
	TryCast(CallMinion, 1, 20%, 1.4s, 25s)[MinionsDeadFor(15s) && TimerInactive(0)] -> CallDefaultMinions();
	TryCast(ChargeArrow, 1, 20%, 0, 0);
	TryCast(DarkStrike, 10, 20%, 0, 5s);
StateAttacking:
	TryCast(PowerUp, 5, 100%, 0.3s, 30s)[HpPercent < 30];
	TryCast(NoCast, 3, 100%, 0s, 10s, HideSkillName)[TimerFinished(0)] -> SetAttackCooldown(1s); //make him not attack when dark blessing activates
	TryCast(DarkAttack, 3, 100%, 1s, 0, HideSkillName)[TimerFinished(0)] -> ResetTimer(0);
	TryCast(CallMinion, 1, 20%, 1.4s, 25s)[MinionsDeadFor(15s) && TimerInactive(0)] -> CallDefaultMinions();
	TryCast(ChargeArrow, 1, 20%, 0, 0);
	TryCast(DarkStrike, 10, 20%, 0, 5s);
	TryCast(DarkBlessing, 5, 15%, 0.8s, 25s, NoInterrupt)[HpPercent < 90] -> SetTimer(0, 4.5s); //a little early
}


//------------------------------------
// Amon Ra
//------------------------------------

macro AmonRaMinionSpawn() {
    SummonMonstersNoExp(2, "ARCLOUSE");
    SummonMonstersNoExp(2, "MIMIC");
    SummonMonstersNoExp(1, "KHALITZBURG");
}

event AmonRaThunderCall {
	local delay = Param1;
	StartTimer();
	SetTimer(5s-delay);
	StartCastCircleWithSound(SelfPosition, 2, delay, false);
OnTimer 5s:
	AreaSkillIndirect(SelfPosition, ThunderStorm, 7);
	EndEvent();
}

SkillHandler("AMON_RA") {
StateAny:
	TryCast(ThunderStorm, 7, 20%, 0.5s, 3s); //Normal 9 cell range
	TryCast(ThunderStorm, 7, 20%, 0.7s, 5s, NoInterrupt | UnlimitedRange); //not actually unlimited, but anywhere he can see
	TryCast(DarkBlessing, 5, 20%, 0.8s, 20s, NoInterrupt | UnlimitedRange);
StateIdle:
    if(CheckCast(ThunderStorm, 10%)) {
        if(FindRandomPlayerOnMap()) {
			var distance = DistanceToSelectedTarget;
			var castTime = 0.05s * distance; //cast time increases with distance
            if(castTime < 0.7s) castTime = 0.7s;
            if(castTime > 5s) castTime = 5s;

			LookAtPosition(TargetPosition);
            CreateEvent("AmonRaThunderCall", TargetPosition, castTime);
            Cast(ThunderStorm, 1, castTime, 8s, NoInterrupt | NoTarget); //he's not really casting thunderstorm, we just want everyone to think he is
        }
    }
	TryCast(CallMinion, 1, 100%, 0.3s, 5s, HideSkillName)[WasRangedOrMagicAttacked] -> { @AmonRaMinionSpawn() }
}

//------------------------------------
// Edga
//------------------------------------

SkillHandler("EDDGA") {
OnInit:
	ResummonMinionCount = 2; //resummon if we have 3 or less
StateAny: 
    TryCast(CallMinion, 1, 25%, 0.7s, 40s)[MinionsDeadFor(20s)] -> SummonMinions(4, "LEIB_OLMAI");
	TryCast(RecallMinion, 1, 100%, 0, 30s);
StateChase:
	TryCast(FireBall, 30, 40%, 0, 0);
	TryCast(Endure, 10, 50%, 0, 10s)[WasRangedOrMagicAttacked];
StateIdle:
	TryCast(Heal, 9999, 100%, 0s, 10s)[HpPercent < 50];
StateAttacking:
	TryCast(MagnumBreak, 30, 30%, 0, 5s);
	TryCast(PowerUp, 3, 100%, 0.7s, 30s)[HpPercent < 30];
}

//------------------------------------
// ORC LORD
//------------------------------------

SkillHandler("ORC_LORD") {
StateIdle:
	TryCast(Heal, 9999, 100%, 0s, 5s)[HpPercent < 50];
StateChase:
    TryCast(Heal, 9999, 100%, 0s, 10s)[HpPercent < 50];
StateAny: 
	TryCast(CallMinion, 1, 50%, 0.7s, 30s)[MinionCount < 3] -> CallDefaultMinions();
	TryCast(PowerUp, 5, 100%, 0.3s, 30s)[HpPercent < 30];
	TryCast(RecallMinion, 1, 100%, 0, 30s);
}

//------------------------------------
// Orc Hero
//------------------------------------

event GrandThunderObject {
	local delay = Param1;
	StartTimer();
	SetTimer(2000-delay);
	StartCastCircle(SelfPosition, 2, delay, false);
OnTimer 2000:
	AreaSkillIndirect(SelfPosition, ThunderStorm, 10);
	EndEvent();
}

event GrandThunderstorm {
	StartTimer();
OnTimer 500: CreateEvent("GrandThunderObject", RandomFreeTileInRange(12), 2000);
OnTimer 600: CreateEvent("GrandThunderObject", RandomFreeTileInRange(12), 1950);
OnTimer 700: CreateEvent("GrandThunderObject", RandomFreeTileInRange(12), 1900);
OnTimer 800: CreateEvent("GrandThunderObject", RandomFreeTileInRange(12), 1850);
OnTimer 900: CreateEvent("GrandThunderObject", RandomFreeTileInRange(12), 1800);
OnTimer 1000: CreateEvent("GrandThunderObject", RandomFreeTileInRange(12), 1750);
OnTimer 1100: CreateEvent("GrandThunderObject", RandomFreeTileInRange(12), 1700);
OnTimer 1200: CreateEvent("GrandThunderObject", RandomFreeTileInRange(12), 1650);
OnTimer 1300: CreateEvent("GrandThunderObject", RandomFreeTileInRange(12), 1600);
OnTimer 1400: CreateEvent("GrandThunderObject", RandomFreeTileInRange(12), 1550);
OnTimer 1500: CreateEvent("GrandThunderObject", RandomFreeTileInRange(12), 1500);
OnTimer 4200: EndEvent();

}

SkillHandler("ORK_HERO") {
OnInit:
	ResummonMinionCount = 2; //resummon if we have 3 or less
StateAny:
	TryCast(CallMinion, 1, 10%, 2s, 30s)[MinionsDeadFor(20s)] -> CallDefaultMinions();
	TryCast(RecallMinion, 1, 100%, 0, 30s);
StateChase:
	TryCast(ThunderStorm, 10, 20%, 1.1s, 5s, NoInterrupt);
	TryCast(GrandThunderstorm, 10, 20%, 2.5s, 8s, NeverInterrupt | EventOnStartCast)[HpPercent < 30] -> CreateEvent("GrandThunderstorm");
StateAttacking:
    TryCast(TwoHandQuicken, 10, 100%, 0, 10h)[HpPercent < 30];
	if(HpPercent > 30)
		TryCast(ThunderStorm, 10, 20%, 2s, 5s);
	else
		TryCast(GrandThunderstorm, 10, 50%, 2.5s, 8s, NeverInterrupt | EventOnStartCast) -> CreateEvent("GrandThunderstorm");
StateIdle:
	TryCast(Heal, 9999, 100%, 0s, 5s)[HpPercent < 30];
}

//------------------------------------
// Doppelganger
//------------------------------------

SkillHandler("DOPPELGANGER") {
OnInit:
	ResummonMinionCount = 2; //resummon if we have 3 or less
StateAny: 
    TryCast(CallMinion, 1, 100%, 0.3s, 30s)[MinionsDeadFor(15s) && HpPercent < 30] -> SummonMinions(1, "NIGHTMARE"); //even his casts are fast in 2hq
    TryCast(CallMinion, 1, 100%, 0.7s, 30s)[MinionsDeadFor(15s)] -> SummonMinions(1, "NIGHTMARE");
	TryCast(Heal, 9999, 100%, 0s, 10s)[FindAllyBelowHpPercent(60)];
	TryCast(Heal, 9999, 100%, 0s, 15s)[HpPercent < 30];
	TryCast(RecallMinion, 1, 100%, 0, 30s);
StateAttacking:
	TryCast(TwoHandQuicken, 10, 100%, 0, 1m)[HpPercent <= 40];
	TryCast(HammerFall, 10, 20%, 0, 10s);
	TryCast(CriticalAttack, 1, 20%, 0, 5s);
}

//------------------------------------
// Dracula
//------------------------------------

SkillHandler("DRACULA") {
StateAny: 
    TryCast(CallMinion, 1, 25%, 0.7s, 30s)[MinionCount < 6] -> CallDefaultMinions(); //his mob is familiars, don't really care to use MinionsDeadFor(time)
	TryCast(RecallMinion, 1, 100%, 0, 30s);
StateChase:
	TryCast(Vampyrism, 1, 100%, 1.3s, 180s)[HpPercent < 30];
StateAttacking:
	TryCast(Vampyrism, 1, 100%, 1.3s, 180s)[HpPercent < 30];
	TryCast(SpeedUp, 5, 100%, 0.7s, 30s)[HpPercent < 30] -> SendEmote(6);
	TryCast(DarkAttack, 5, 100%, 0s, 20s)[HpPercent < 80];
}

//------------------------------------
// Drake
//------------------------------------

SkillHandler("DRAKE") {
	ResummonMinionCount = 3; //resummon if we have 3 or less
StateAny: 
    TryCast(CallMinion, 1, 100%, 0s, 45s)[MinionsDeadFor(15s)] -> CallDefaultMinions();
StateAttacking:
	//TryCast(Bash, 10, 20%, 0, 5s);
StateIdle:
	TryCast(SpeedUp, 5, 100%, 0.7s, 30s)[HpPercent < 30] -> SendEmote(6);
}

//------------------------------------
// Moonlight Flower
//------------------------------------

//ninetail npc that splits from moonlight to spawn a clone
event NineTailWalkEvent {
	local type = Param1;
	StartTimer(100);
	ChangeNpcClass("NINE_TAIL");
	ShowNpc(""); //reveal this event npc with a blank name
	StartWalkToRandomTile(6, 150); //5 tiles away, 150 move speed
OnTimer 100:
	if(IsMoving)
		ResetTimer();
OnTimer 800:
	PlayEffectAtMyLocation("PuffOfSmoke");
	if(type == 0) SummonMobWithType("MOONLIGHT_CLONE", "MOONLIGHT_C1"); //caster clone
	if(type == 1) SummonMobWithType("MOONLIGHT_CLONE", "MOONLIGHT_C2"); //mammonite clone
	if(type == 2) SummonMobWithType("MOONLIGHT_CLONE", "MOONLIGHT_C3"); //summoner clone
	EndEvent();
}

//this macro is used both when she hits 50% hp after a cast or instantly if she dies before it's used
macro MoonlightSplit() {
	CreateEvent("NineTailWalkEvent", CurrentPosition, 0);
	CreateEvent("NineTailWalkEvent", CurrentPosition, 1);
	CreateEvent("NineTailWalkEvent", CurrentPosition, 2);
	SetEventCooldown("Split", -1); //never repeat
	AdminHide();
}

//skill block used for both idle and chase states
macro MoonlightCombatActions() {
	if(HpPercent < 50 && IsNamedEventOffCooldown("Split")) {
		TryCast(None, 1, 100%, 1.3s, 0, NeverInterrupt) -> {
			@MoonlightSplit();
			return;
		}
	}
	
	if(HpPercent < 30 && IsNamedEventOffCooldown("Final Phase")) {
		TryCast(PowerUp, 3, 100%, 0.4s, 30s)[HpPercent < 30] -> SendEmote(7); //grumpy;
		ResetAllCooldowns();
		SetEventCooldown("Split", -1); //we don't want this happening again. We know it already happened cause it's higher priority
		SetEventCooldown("Final Phase", -1);
		PutSkillOnCooldown(PowerUp, 30s); //she just used this, no need to have her use it agian
		TryCast(CallMinion,1, 100%, 0.4s, 30s) -> CallDefaultMinions(); //no condition
	}

	if(HpPercent < 80 && IsNamedEventOffCooldown("Magic Combo")) {
		TryCast(ColdBolt, 5, 100%, 0.8s, 10s, NoInterrupt | EventOnStartCast) -> SendEmote(29); //gg
		TryCast(FireBolt, 5, 100%, 0.8s, 10s, NoInterrupt);
		TryCast(LightningBolt, 5, 100%, 0.8s, 10s, NoInterrupt);
		SetEventCooldown("Magic Combo", 20000);
	}

	TryCast(CallMinion, 1, 1s, 2s, 30s)[MinionsDeadFor(15s)] -> CallDefaultMinions();
}

//caster clone AI
AltSkillHandler("MOONLIGHT_C1") {
	OnInit:
		FlagAsMvp();
	StateAny:
		TryCast(ColdBolt, 5, 100%, 0.8s, 10s, NoInterrupt | EventOnStartCast) -> SendEmote(29); //gg
		TryCast(FireBolt, 5, 100%, 0.8s, 10s, NoInterrupt);
		TryCast(LightningBolt, 5, 100%, 0.8s, 10s, NoInterrupt);
	OnDie:
		CallHiddenParentToNearbyPosition();
}

//Mammonite clone AI
AltSkillHandler("MOONLIGHT_C2") {
	OnInit:
		FlagAsMvp();
	StateAttacking:
		TryCast(Mammonite, 10, 100%, 0, 5s) -> SendEmote(8);
	OnDie:
		CallHiddenParentToNearbyPosition();
}

//Minion clone AI
AltSkillHandler("MOONLIGHT_C3") {
	OnInit:
		FlagAsMvp();
	StateAny:
		TryCast(CallMinion, 1, 100%, 2s, 30s, NoInterrupt)[MinionCount < 3] -> SummonMinions(5, "NINE_TAIL");
		TryCast(Heal, 4999, 100%, 0.7s, 5s)[FindAllyBelowHpPercent(60)];
	OnDie:
		CallHiddenParentToNearbyPosition();
}

//The real Moonlight Flower
SkillHandler("MOONLIGHT") {
OnInit:
	ResummonMinionCount = 2;
StateIdle:
	TryCast(CallMinion, 1, 100%, 2s, 30s)[MinionCount < 3] -> CallDefaultMinions();
	TryCast(Heal, 99999, 100%, 6s, 10s, EasyInterrupt)[HpPercent <= 99 && TimeOutOfCombat > 60s] -> ResetAllCooldowns();
	TryCast(Heal, 9999, 100%, 3s, 10s)[HpPercent < 70];
	TryCast(RecallMinion, 1, 100%, 0, 30s);

StateChase:
	@MoonlightCombatActions();
	TryCast(ColdBolt, 5, 20%, 0, 5s);
	TryCast(FireBolt, 5, 20%, 0, 5s);
	TryCast(LightningBolt, 5, 20%, 0, 5s);
	TryCast(RecallMinion, 1, 100%, 0, 30s);

StateAttacking:
	@MoonlightCombatActions();
	TryCast(PowerUp, 3, 100%, 0.7s, 30s)[HpPercent < 30] -> SendEmote(7); //grumpy;
	TryCast(Mammonite, 10, 20%, 0, 5s) -> SendEmote(8); //dollar sign
	TryCast(HammerFall, 10, 20%, 0, 15s)[HpPercent < 90] -> SendEmote(0); //!
	TryCast(RecallMinion, 1, 100%, 0, 30s);

StateHidden:
	//TryCast(None, 1, 1000, 0, 5000)[MinionCount > 0] -> TeleportNearRandomMinion();
	if(TimeInAiState > 5s && MinionCount == 0)
	{
		AdminUnHide();
		ChangeAiState(StateSearch);
	}

OnDie:
	//if moonlight dies without splitting, instantly split and recover 10k hp
	if(IsNamedEventOffCooldown("Split"))
	{
		CancelCast();
		@MoonlightSplit();
		SetHpNoNotify(10000);
	}
}

